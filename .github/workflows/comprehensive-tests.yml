name: 🧪 Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Lambda Tests
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📦 Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: 🧪 Run backend unit tests
      working-directory: ./backend
      run: npm run test:coverage

    - name: 📊 Upload backend coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Component Tests
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🧪 Run frontend unit tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: 📊 Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  web-gui-tests:
    runs-on: ubuntu-latest
    name: Web GUI Integration Tests
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install Python dependencies
      working-directory: ./infrastructure
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install requests flask

    - name: 🎭 Install Playwright
      working-directory: ./infrastructure
      run: playwright install --with-deps chromium

    - name: 🌐 Run Web GUI tests
      working-directory: ./infrastructure
      run: python -m pytest tests/test_web_gui_fixed.py -v

    - name: 📋 Upload Web GUI test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: web-gui-test-results
        path: infrastructure/test-results/

  infrastructure-tests:
    runs-on: ubuntu-latest
    name: Infrastructure Tests (Existing)
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install Python dependencies
      working-directory: ./infrastructure
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: 🧪 Run infrastructure tests
      working-directory: ./infrastructure
      run: python -m pytest tests/test_aws_integration.py tests/test_cli_e2e.py -v

  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [backend-tests, frontend-tests]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🎭 Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps chromium

    - name: 🧪 Run E2E tests
      working-directory: ./frontend
      run: npx playwright test tests/e2e/basic.spec.ts --project=chromium

    - name: 📋 Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/

  test-summary:
    runs-on: ubuntu-latest
    name: Test Summary
    needs: [backend-tests, frontend-tests, web-gui-tests, infrastructure-tests, e2e-tests]
    if: always()
    steps:
    - name: 📊 Test Results Summary
      run: |
        echo "🧪 Comprehensive Test Results Summary"
        echo "===================================="
        echo ""
        echo "✅ Backend Lambda Tests: ${{ needs.backend-tests.result }}"
        echo "✅ Frontend Component Tests: ${{ needs.frontend-tests.result }}"
        echo "✅ Web GUI Integration Tests: ${{ needs.web-gui-tests.result }}"
        echo "✅ Infrastructure Tests: ${{ needs.infrastructure-tests.result }}"
        echo "✅ End-to-End Tests: ${{ needs.e2e-tests.result }}"
        echo ""
        if [[ "${{ needs.backend-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" && 
              "${{ needs.web-gui-tests.result }}" == "success" && 
              "${{ needs.infrastructure-tests.result }}" == "success" && 
              "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "🎉 All tests passed! Ready for deployment."
        else
          echo "❌ Some tests failed. Please review and fix."
          exit 1
        fi
