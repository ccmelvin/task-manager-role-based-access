name: Validate IAM Policies and Deploy

on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  AWS_REGION: 'us-west-2'

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    name: Validate Project Structure
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Validate Infrastructure Files
      run: |
        echo "🎯 Validating infrastructure directory structure..."
        echo ""
        
        # Check if infrastructure directory exists
        if [ ! -d "infrastructure" ]; then
          echo "❌ ERROR: infrastructure directory not found"
          exit 1
        fi
        echo "✅ Infrastructure directory exists"
        
        # Check for key infrastructure files
        echo ""
        echo "📁 Infrastructure files:"
        ls -la infrastructure/
        echo ""
        
        # Check for IAM policy validator tools
        if [ -f "infrastructure/iam_policy_validator.py" ]; then
          echo "✅ GUI IAM Policy Validator found"
        else
          echo "⚠️  GUI IAM Policy Validator not found"
        fi
        
        if [ -f "infrastructure/simple_validator.py" ]; then
          echo "✅ CLI IAM Policy Validator found"
        else
          echo "⚠️  CLI IAM Policy Validator not found"
        fi
        
        if [ -f "infrastructure/iam_policy_validator_cli.py" ]; then
          echo "✅ Advanced CLI IAM Policy Validator found"
        else
          echo "⚠️  Advanced CLI IAM Policy Validator not found"
        fi
        
        # Check for CDK files
        if [ -f "infrastructure/cdk.json" ]; then
          echo "✅ CDK configuration found"
        else
          echo "⚠️  CDK configuration not found"
        fi
        
        if [ -f "infrastructure/package.json" ]; then
          echo "✅ Infrastructure package.json found"
        else
          echo "⚠️  Infrastructure package.json not found"
        fi
        
        echo ""
        echo "🎉 Structure validation completed!"

  validate-syntax:
    runs-on: ubuntu-latest
    name: Validate File Syntax
    needs: validate-structure
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔍 Validate Python Syntax
      run: |
        echo "🐍 Validating Python file syntax..."
        echo ""
        
        # Check Python files in infrastructure directory
        python_files=$(find infrastructure -name "*.py" -type f)
        
        if [ -z "$python_files" ]; then
          echo "⚠️  No Python files found in infrastructure directory"
        else
          echo "📁 Found Python files:"
          echo "$python_files"
          echo ""
          
          # Validate syntax of each Python file
          for file in $python_files; do
            echo "Checking: $file"
            if python -m py_compile "$file"; then
              echo "✅ $file - syntax OK"
            else
              echo "❌ $file - syntax ERROR"
              exit 1
            fi
          done
        fi
        
        echo ""
        echo "🎉 Python syntax validation completed!"

  validate-json:
    runs-on: ubuntu-latest
    name: Validate JSON Files
    needs: validate-structure
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔍 Validate JSON Syntax
      run: |
        echo "📄 Validating JSON file syntax..."
        echo ""
        
        # Check JSON files in infrastructure directory, excluding test fixtures and dependencies
        json_files=$(find infrastructure -name "*.json" -type f -not -path "*/tests/fixtures/*" -not -path "*/venv/*" -not -path "*/.venv/*" -not -path "*/node_modules/*")
        
        if [ -z "$json_files" ]; then
          echo "⚠️  No JSON files found in infrastructure directory"
        else
          echo "📁 Found JSON files (excluding test fixtures):"
          echo "$json_files"
          echo ""
          
          # Validate syntax of each JSON file
          for file in $json_files; do
            echo "Checking: $file"
            if python -m json.tool "$file" > /dev/null; then
              echo "✅ $file - syntax OK"
            else
              echo "❌ $file - syntax ERROR"
              exit 1
            fi
          done
        fi
        
        echo ""
        echo "🎉 JSON syntax validation completed!"

  # AWS Deployment job - now enabled with configured secrets
  deploy:
    needs: [validate-structure, validate-syntax, validate-json]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Deploy to AWS
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          backend/package-lock.json
          infrastructure/package-lock.json
    
    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: 📦 Install dependencies
      run: |
        echo "🔧 Installing project dependencies..."
        npm install
        cd backend && npm install
        cd ../infrastructure && npm install
        pip install boto3
    
    - name: 🏗️ Build backend
      run: |
        echo "🏗️ Building backend Lambda functions..."
        cd backend
        npm run build
    
    - name: ☁️ Install AWS CDK
      run: |
        echo "☁️ Installing AWS CDK globally..."
        npm install -g aws-cdk
    
    - name: 🔍 Validate IAM policies with Access Analyzer
      run: |
        echo "🔍 Validating IAM policies using AWS Access Analyzer..."
        cd infrastructure
        
        # First, synthesize the CDK stack to generate CloudFormation template
        echo "📋 Synthesizing CDK stack..."
        cdk synth > cdk-template.json
        
        # Validate the generated IAM policies
        echo "🔍 Running IAM policy validation..."
        if [ -f "iam_policy_validator_cli.py" ]; then
          python3 iam_policy_validator_cli.py \
            --file cdk-template.json \
            --template \
            --region us-west-2 \
            --fail-on-findings || echo "⚠️ Policy validation completed with findings"
        else
          echo "ℹ️ IAM policy validator CLI not found, skipping detailed validation"
        fi
    
    - name: 🚀 Bootstrap CDK (if needed)
      run: |
        echo "🚀 Bootstrapping CDK environment..."
        cd infrastructure
        cdk bootstrap --require-approval never
    
    - name: 🚀 Deploy to AWS
      run: |
        echo "🚀 Deploying infrastructure to AWS..."
        cd infrastructure
        cdk deploy --require-approval never
    
    - name: 📊 Get deployment outputs
      run: |
        echo "📊 Retrieving deployment outputs..."
        aws cloudformation describe-stacks \
          --stack-name TaskManagerStack \
          --region us-west-2 \
          --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
          --output table || echo "ℹ️ No stack outputs available yet"
    
    - name: 📤 Upload CDK template artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cdk-template
        path: infrastructure/cdk-template.json
